<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--    <context:annotation-config/>：用于激活已经在Spring容器中注册的bean或者注解，因为我们通过容器创建的bean中，-->
    <!--    底层有可能使用了其它的注解，我们通过<context:component-scan>就不能指定具体的包了，-->
    <!--    所以可以使用<context:annotation-config/>激活-->
    <mvc:annotation-driven/>


    <!-- 配置注解扫描器，将@Controller注解标注的类加入spring-mvc容器中 -->
    <context:component-scan base-package="com.bjpowernode.controller"/>

    <!-- Spring session 的配置类 -->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="cookieSerializer" ref="cookieSerializer"/>
    </bean>

    <!--  修改cookie的绑定路径  -->
    <bean id="cookieSerializer" class="org.springframework.session.web.http.DefaultCookieSerializer">
        <!-- 同域名下不同项目之间的session共享，修改cookie的绑定策略 -->
        <property name="cookiePath" value="/"/>
        <!-- 同根域名下不同二级子域名之间的session共享，修改cookie的绑定策略 -->
        <property name="domainName" value="web.com"/>
    </bean>

    <!-- 配置jedis连接工厂，用于连接redis -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.hostName}"/>
        <property name="port" value="${redis.port}"/>
    </bean>

    <!--读取redis.properties属性配置文件-->
    <context:property-placeholder location="classpath:redis.properties"/>


</beans>